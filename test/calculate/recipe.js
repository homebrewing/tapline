// Generated by CoffeeScript 1.6.3
(function() {
  var app, assert, brauhaus, recipeList, request, sinon, util;

  assert = require('assert');

  brauhaus = require('brauhaus');

  request = require('supertest');

  sinon = require('sinon');

  util = require('../../lib/util');

  app = require('../../lib/server').app;

  recipeList = [
    {
      name: 'foo',
      fermentables: [
        {
          weight: 1
        }
      ],
      spices: [
        {
          aa: 4.5,
          weight: 0.0028
        }
      ]
    }
  ];

  describe('Recipe Calculation', function() {
    it('Should respond with JSON on success', function(done) {
      return request(app).post('/v1/calculate/recipe.json').send({
        format: 'json',
        recipes: recipeList
      }).expect('Content-Type', /json/).expect(200).end(function(err, res) {
        if (err) {
          return done(err);
        }
        assert.ok(res.body.length);
        assert.ok(res.body[0].og);
        assert.ok(res.body[0].fg);
        assert.ok(res.body[0].ibu);
        assert.ok(res.body[0].abv);
        return done();
      });
    });
    it('Should require a valid input format', function(done) {
      return request(app).post('/v1/calculate/recipe.json').send({
        recipes: recipeList
      }).expect(400, done);
    });
    it('Should require a valid input recipe list', function(done) {
      return request(app).post('/v1/calculate/recipe.json').send({
        format: 'json'
      }).expect(400, done);
    });
    describe('Dependent calls', function() {
      before(function() {
        sinon.spy(brauhaus.Recipe.prototype, 'calculate');
        return sinon.spy(brauhaus.Recipe.prototype, 'timeline');
      });
      it('Should call Recipe.prototype.calculate', function(done) {
        return request(app).post('/v1/calculate/recipe.json').send({
          format: 'json',
          recipes: recipeList
        }).end(function(err, res) {
          assert.ok(brauhaus.Recipe.prototype.calculate.called);
          return done();
        });
      });
      it('Should call Recipe.prototype.timeline', function(done) {
        return request(app).post('/v1/calculate/recipe.json').send({
          format: 'json',
          recipes: recipeList
        }).end(function(err, res) {
          assert.ok(brauhaus.Recipe.prototype.timeline.called);
          return done();
        });
      });
      return after(function() {
        brauhaus.Recipe.prototype.calculate.restore();
        return brauhaus.Recipe.prototype.timeline.restore();
      });
    });
    return describe('Input parsing', function(done) {
      before(function() {
        return sinon.spy(util, 'getRecipeList');
      });
      it('Should call getRecipeList to parse recipes', function(done) {
        return request(app).post('/v1/calculate/recipe.json').send({
          format: 'json',
          recipes: [
            {
              name: 'foo'
            }
          ]
        }).expect(200).end(function(err, res) {
          assert.ok(util.getRecipeList.called);
          return done();
        });
      });
      return after(function() {
        return util.getRecipeList.restore();
      });
    });
  });

}).call(this);
